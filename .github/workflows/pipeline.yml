---
name: Build + Deployment Pipeline

on:
  push:
    branches-ignore:
      - dependabot/**
    paths-ignore:
      - '**.adoc'
      - '**.md'
      - 'docs/**'
      - '.devcontainer/**'
      - '.github/workflows/dev-environment.yml'
      - '.vscode/**'
      - '.gitkeep'
  schedule:
    - cron: '0 1 * * 2'

env:
  IMAGE_TAG_RC: rc
  IMAGE_TAG_LATEST: latest
  IMAGE_NAME: template-repository
  CONTEXT: .
  DOCKERFILE: Dockerfile
  REGISTRY: docker.io

permissions:
  contents: read

jobs:

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  lint:
    runs-on: ubuntu-latest
    name: ${{ matrix.linter }}
    strategy:
      matrix:
        linter: ['yaml', 'workflows', 'filenames', 'folders']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run lint-${{ matrix.linter }} from docker-compose.yml
        run: docker compose up lint-${{ matrix.linter }} --exit-code-from lint-${{ matrix.linter }}
        shell: bash

  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run lint-dockerfile from docker-compose.yml
        run: docker compose up lint-dockerfile --exit-code-from lint-dockerfile
        shell: bash

  # ----- Build Docs stage ------------------------------------------------------------------------

  generate-docs:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
      - name: Copy files from docs to project root
        run: |
          cp docs/index.md README.md
          cp docs/about/code-of-conduct.md CODE_OF_CONDUCT.md
          cp docs/about/contribute.md CONTRIBUTING.md
          cp docs/about/license.md LICENSE.md
          cp docs/about/security.md SECURITY.md
        shell: bash
      - name: Add do-not-edit remark to Markdown files in project root
        run: |
          for file in *.md; do
            {
              echo
              echo "<!-- !    DO NOT EDIT DIRECTLY !!!!!                         -->"
              echo "<!-- !    File is auto-generated by pipeline                 -->"
              echo "<!-- !    Contents are based on files from docs/about dir    -->"
            } >> "$file"
          done
        shell: bash
      - name: Replace links in Markdown files in project root
        run: |
          for file in *.md; do
            content=$(cat "$file")

            old="(usage/index.md)"
            new="(https://sommerfeld-io.github.io/template-repository/usage)"
            content="${content//$old/$new}"

            old="(about/development-guide.md)"
            new="(https://sommerfeld-io.github.io/template-repository/about/development-guide)"
            content="${content//$old/$new}"

            echo "$content" > "$file"
          done
        shell: bash
      - name: Build docs-build image
        run: docker compose build docs-build
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: 'docs: [Actions Bot] generate docs'

  # ----- Build images stage ----------------------------------------------------------------------

  build-image:
    runs-on: ubuntu-latest
    needs: ['lint-dockerfile']
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # - name: Login to Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ secrets.DOCKERHUB_USER }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v5.5.1
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}
      #     labels: |
      #       org.opencontainers.image.revision=${{ github.sha }}
      #       org.opencontainers.image.title=${{ matrix.image-name }}
      #       org.opencontainers.image.description=${{ matrix.image-name }}
      #       org.opencontainers.image.vendor=sommerfeld-io
      #       org.opencontainers.image.documentation=https://sommerfeld-io.github.io/template-repository
      # - name: Build the Docker image and push to
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     platforms: linux/amd64
      #     push: true
      #     tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     provenance: true
      #     sbom: true
      # - name: Docker Scout CVEs for :${{ github.sha }}
      #   uses: docker/scout-action@v1.14.0
      #   with:
      #     command: cves
      #     image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      #     exit-code: false
      #     write-comment: ${{ github.event_name == 'pull_request' }}

  # ----- Deploy ----------------------------------------------------------------------

  publish-rc:
    runs-on: ubuntu-latest
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    needs: ['build-image']
    permissions:
      contents: read
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Re-tag ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }} as release candicate (:${{ env.IMAGE_TAG_RC }}) and deploy to ${{ env.REGISTRY }}
      #   run: |
      #     SRC_IMAGE="${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
      #     TARGET_IMAGE="${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_RC }}"
      #     docker pull "$SRC_IMAGE"
      #     docker tag "$SRC_IMAGE" "$TARGET_IMAGE"
      #     docker push "$TARGET_IMAGE"
      #   shell: bash

  # ----- Release stage ---------------------------------------------------------------------------

  release-code:
    runs-on: ubuntu-latest
    needs: [
      'publish-rc',
      'generate-docs',
    ]
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Install Node.js
        uses: actions/setup-node@v4.1.0
        with:
          node-version: 22.2.0
      - name: semantic-release - Install
        run: |
          npm install --save-dev semantic-release
          npm install --save-dev @semantic-release/commit-analyzer
          npm install --save-dev @semantic-release/release-notes-generator
          npm install --save-dev @semantic-release/npm
          npm install --save-dev @semantic-release/exec
          npm install --save-dev @semantic-release/git
          npm install --save-dev @semantic-release/github
        shell: bash
      - name: semantic-release - Run
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPO_AND_PROJECT }}
        run: npx semantic-release
        shell: bash
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: 'docs: [Actions Bot] bump version'

  # ----- Cleanup -------------------------------

  cleanup-dockerhub:
    runs-on: ubuntu-latest
    needs: ['publish-rc']
    if: always()
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # - name: Remove ${{ env.IMAGE_NAME }}:${{ github.sha }} images from registry
      #   run: |
      #     TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKERHUB_USER }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
      #     curl -X DELETE -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}/tags/${{ github.sha }}/
      #   shell: bash
