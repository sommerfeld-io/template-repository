---
name: "Pipeline: Commit + Test"

on:
  push:
    branches-ignore:
      - dependabot/**
    paths-ignore:
      - '**.adoc'
      - '**.md'
      - 'docs/**'
      - '.devcontainer/**'
      - '.github/workflows/dev-environment.yml'
      - '.vscode/**'
      - '.gitkeep'
  schedule:
    - cron: '0 1 * * 2'

env:
  IMAGE_TAG_RC: rc
  IMAGE_TAG_LATEST: latest
  IMAGE_NAME: template-repository
  CONTEXT: .
  DOCKERFILE: Dockerfile
  REGISTRY: docker.io

permissions:
  contents: read

jobs:

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  lint:
    runs-on: ubuntu-latest
    name: ${{ matrix.linter }}
    strategy:
      matrix:
        linter: ['yaml', 'workflows', 'filenames', 'folders', 'markdown-links']
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run lint-${{ matrix.linter }} from docker-compose.yml
        env:
          LINTER: ${{ matrix.linter }}
        run: docker compose up "lint-$LINTER" --exit-code-from "lint-$LINTER"
        shell: bash

  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Run lint dockerfile
        run: docker compose up app-lint-dockerfile --exit-code-from app-lint-dockerfile
        shell: bash

  files-should-exist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Mandatory files should exist
        uses: chrisreddington/validate-file-exists@v0.0.8
        with:
          required-files: >
            .editorconfig,
            .gitignore,
            taskfile.yml,
            .github/dependabot.yml,
            .task/.gitkeep,
            .vscode/settings.json

  # ----- Build images stage ----------------------------------------------------------------------

  build-image:
    runs-on: ubuntu-latest
    needs: [
      'lint',
      'lint-dockerfile',
      'shellcheck',
      'files-should-exist',
    ]
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: hadolint
        uses: hadolint/hadolint-action@v3.3.0
        with:
          dockerfile: Dockerfile
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # - name: Login to Container Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ secrets.DOCKERHUB_USER }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Extract metadata (tags, labels) for Docker
      #   id: meta
      #   uses: docker/metadata-action@v5.5.1
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}
      #     labels: |
      #       org.opencontainers.image.revision=${{ github.sha }}
      #       org.opencontainers.image.title=$IMAGE_NAME
      #       org.opencontainers.image.description=$IMAGE_NAME
      #       org.opencontainers.image.vendor=sommerfeld-io
      #       org.opencontainers.image.documentation=https://sommerfeld-io.github.io/template-repository
      # - name: Build the Docker image and push to
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     platforms: linux/amd64
      #     push: true
      #     tags: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     provenance: true
      #     sbom: true
      # - name: Docker Scout CVEs for :${{ github.sha }}
      #   uses: docker/scout-action@v1.14.0
      #   with:
      #     command: cves
      #     image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
      #     exit-code: false
      #     write-comment: ${{ github.event_name == 'pull_request' }}

  # ----- Deploy ----------------------------------------------------------------------

  publish-rc:
    runs-on: ubuntu-latest
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    needs: ['build-image']
    permissions:
      contents: read
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Re-tag ${{ secrets.DOCKERHUB_USER }}/$IMAGE_NAME as release candicate (:${{ env.IMAGE_TAG_RC }}) and deploy to ${{ env.REGISTRY }}
      #   env:
      #     REGISTRY: ${{ env.REGISTRY }}
      #     DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      #     IMAGE_NAME: $IMAGE_NAME
      #     COMMIT_SHA: ${{ github.sha }}
      #   run: |
      #     SRC_IMAGE="$REGISTRY/$DOCKERHUB_USER/$IMAGE_NAME:$COMMIT_SHA"
      #     TARGET_IMAGE="$DOCKERHUB_USER/$IMAGE_NAME:$IMAGE_TAG_RC"
      #     docker buildx imagetools create --tag "$TARGET_IMAGE" "$SRC_IMAGE"
      #   shell: bash

  # ----- Build Docs stage ------------------------------------------------------------------------

  generate-docs:
    runs-on: ubuntu-latest
    needs: [
      'build-image'
    ]
    if: ${{ github.actor != 'dependabot[bot]' }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{github.ref}}
      - name: Install Task
        uses: arduino/setup-task@v2.0.0
        with:
          version: 3.x
      - name: Run task to generate docs
        run: |
          export TASK_X_REMOTE_TASKFILES=1
          task docs:generate --yes
        shell: bash
      - name: Build docs-build image
        run: docker compose build docs-build
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: 'docs: [Actions Bot] generate docs'

  # ----- Release stage ---------------------------------------------------------------------------

  release-code:
    runs-on: ubuntu-latest
    needs: [
      'publish-rc',
      'generate-docs',
    ]
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{github.ref}}
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Install Node.js
        uses: actions/setup-node@v5.0.0
        with:
          node-version: 22.2.0
      - name: semantic-release - Install
        run: |
          npm install --save-dev semantic-release
          npm install --save-dev @semantic-release/commit-analyzer
          npm install --save-dev @semantic-release/release-notes-generator
          npm install --save-dev @semantic-release/npm
          npm install --save-dev @semantic-release/exec
          npm install --save-dev @semantic-release/git
          npm install --save-dev @semantic-release/github
        shell: bash
      - name: semantic-release - Run
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPO_AND_PROJECT }}
        run: npx semantic-release
        shell: bash
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Get the latest git tag (freshly created by semantic-release)
        id: get-version
        run: |
          # Get the latest tag and strip the 'v' prefix if present
          VERSION="$(git describe --tags --abbrev=0 | sed 's/^v//')"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
        shell: bash
      - name: Get the latest git tag (freshly created by semantic-release)
        env:
          VERSION: ${{ steps.get-version.outputs.VERSION }}
        run: echo "freshly created tag $VERSION"
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: "refactor(release): bump version to ${{ steps.get-version.outputs.VERSION }} [Actions Bot]"

  # ----- Cleanup -------------------------------

  cleanup-dockerhub:
    runs-on: ubuntu-latest
    needs: ['publish-rc']
    if: always()
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      # - name: Remove ${{ env.IMAGE_NAME }}:${{ github.sha }} images from registry
      #   env:
      #     DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      #     COMMIT_SHA: ${{ github.sha }}
      #     DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      #   run: |
      #     TOKEN=$(curl -s -H "Content-Type: application/json" -X POST \
      #       -d "{\"username\": \"$DOCKERHUB_USER\", \"password\": \"$DOCKERHUB_TOKEN\"}" \
      #       https://hub.docker.com/v2/users/login/ | jq -r .token)
      #     curl -X DELETE -H "Authorization: JWT ${TOKEN}" \
      #       "https://hub.docker.com/v2/repositories/${DOCKERHUB_USER}/${IMAGE_NAME}/tags/${COMMIT_SHA}/"
      #   shell: bash
